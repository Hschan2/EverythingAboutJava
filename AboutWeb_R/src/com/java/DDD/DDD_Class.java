package com.java.DDD;

public class DDD_Class {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		DDD (Domain Driven Design, 도메인 주도 설계)
//			(도메인 - 사용자가 사용하는 것, 소프트웨어로 해결하고자 하는 문제 영역, 비즈니스 영역)
//		도메인을 중심으로 하는 개발 방식 -> 도메인에 관련된 문제를 해결하는 것
//		복잡한 도메인을 해결하는 것을 높은 웃너순위로 생각하고 서비스를 만들어 가는 방법
//			=> 도메인의 복잡성을 조금 더 쉽게 다룰 수 있게 도와주는 도구
//		
//		쉽게 이해하기 위해
//		* 개발 프로세스
//		요구사항 분석 -> 설계 -> 구현 *
//		
//			도메인 전문가			개발자
//		도메인 ->(추상화) 모델 ->(실체화) 소프트웨어
//							(소프트웨어 개발과 모델링의 불일치 문제 발생 => 개발자는 모델링할 때 함께하지 않아서 모델의 구성을 이해하지 못함)
//		
//		설계할 때			
//		1. 유비쿼터스 랭귀지 (보편 언어)
//		도메인에 대해 어휘를 이해관계자(도메인 전문가, 개발자, 분석가 등)들이 공통적으로 의미를 이해할 수 있도록 정의 (예시. 화물 운송 서비스의 쿼리)
//		
//		2. 모델 주도 설계
//		분석과 설계를 나누지 않으며 분석 / 설계 / 구현의 모든 단계를 관통하는 하나의 모델을 유지
//		모델링을 통해 가져올 수 있는 통찰을 코드에도 적용
//		모델 == 코드
//		
//		
//		도메인 모델 (Domain Model)
//		도메인에 대한 구체적인 설계, 도메인을 개념적으로 표현
//		개념들의 관계를 표현한 무델
//		문제 영역 시각화
//		
//		도메인 주도 설계
//		복잡한 소프트웨어는 기술 자체의 복잡성 보다 도메인 자체의 복잡성에 기인
//			=> 도메인을 가장 잘 아는 사람(도메인 전문가)와 어떻게 협업할 것인가 중요
//			=> 유비쿼터스 랭귀지, 모델 주도 디자인
//			
//		도메인 주도 설계 등장 배경
//		데이터에 종속적인 애플리케이션
//		모델링과 개발과의 불일치
//		
//		데이터 중심적인 접근법
//		기존 개발은 DB 테이블 중심
//		빈약한 도메인 모델
//			- Getter, Setter만으로 구성된 모델
//			- 데이터만 가지는 데이터 홀더 개념
//			- Big Service Layer
//			=> 모델과 구현 코드의 불일치가 발생하고 소통의 어려움이 생김
//		
//			
//		도메인 주도 설계의 Overview
//		전술적 설계 - 구체적 설계
//			- Building Block
//		전략적 설계에서 더 상세한 부분(Bounded Context 내부) 모델링
//		Model Driven Design - 도메인 주도 설계와 아주 관련된 부분
//		빌딩 블록(패턴)을 사용하여 모델링 (Aggregate 패턴) - Bounded Context 안에 있는 결과적인 불변성의 개념
//		계층형 아키텍쳐를 통한 도메인 모델 분리 - 아키텍처 UI 등을 도메인 모델과 분리하여 명학하게 해야 한다.
//		도메인 이벤트를 통해서 도메인을 보다 명확하게 모델링
//		
//		전략적 설계 - 개념 설계
//		복잡한 도메인의 맥락 경계를 명확히 정의하는 과정 -> 명확하게 정의하지 않으면 계속 더해지는 것들에 대해 복잡해지는 문제가 발생 (진흙 덩어리 문제)
//		Bounded Context 안의 도메인 모델에서 보편 언어를 개발하는 방법
//		도메인에서 서브 도메인으로 복잡성을 분리 (핵심, 지원 도메인 파악)
//		Context Mapping 기술을 활용하여 여러 개의 Bounded Context를 통합
//		이벤트 스토밍 기법을 활용해 Bounded Context 식별
//			
//		   (전략적 설계)       (전술적 설계)
//			    추상화	                  실체화
//		도메인 	->		모델		->		소프트웨어
//		
//		정리
//		DDD의 개념을 떠올리면 전술적 설계(Builing Block)에 대한 개념을 많이 떠올린다. (Entity, Value Object, Aggregate)
//		DDD의 전술적 설계만 했을 시에도 장점이 존재 - DDD Lite
//		그러나 DDD는 이러한 패턴보다 협업을 통한 문제 해결이 더 강조되어야 한다.
		
	}

}
