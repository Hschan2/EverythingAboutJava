package com.java.ProcessThread;

public class ThreadClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//		멀티 프로세스의 단점을 보완하기 위해 스레드 (프로세스 안에서 실행되는 작업 흐름의 단위)
//		프로세스가 작동한다 = 프로세스 안의 스레드가 작동한다
//		
//		스레드
//		프로세스 구조에서 code, data, heap 영역을 공유. 쓰레드 2개로 작업(stack)을 따로
//		프로세스 안에 최소 1개의 스레드 존재
//		프로세스가 실행된다 = 스레드가 실행된다 -> code, data, heap 영역이 CPU와 메모리에 적재
//		
//		기존에는 프로세스 안에 PCB가 들어가지만 RAM에 적재되어 그 안에 레지스터 값 등이 코어에 있는 레지스터 빈 곳에 채워지고 레지스터 블록이 들어가고 프로세스가 돌아가는 것 = 멀티 프로세스
//		메모리에 적재된 같은 값을 사용하는 code, data, heap을 그대로 두고 레지스터 값에 있는 PCB에 이던 레지스터 블록들만 값이 변경되면 된다 = 멀티 스레드 -> Context Swiching 비용이 저렴
//		
//		멀티 스레드
//		디버깅이 까다롭다
//		한 프로세스 안의 스레드에 문제가 생기면 같은 프로세스 안의 스레드도 같이 문제
//		같은 데이터를 공유하기 때문에 데이터 동기화에 신경!
//		
//		자원은 프로세스 단위로 받고 작업/스케줄링은 스레드 단위로 진행
	}

}
