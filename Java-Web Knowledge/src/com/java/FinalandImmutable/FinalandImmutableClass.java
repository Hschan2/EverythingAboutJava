package com.java.FinalandImmutable;

public class FinalandImmutableClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		Java final과 불편 객체
//		
//		final을 사용하는 이유?
//		한 번만 할당이 가능한 선언이다. 즉, 재할당하려고 하면 컴파일 오류가 발생해 바로 확인이 가능하다.
//		개발을 하다 실수를 할 때 빠르게 발견할 수 있다.
//		한 번에 한 가지만 집중가능하다.
//		값에 대한 검증이 필요 없어 로직 구현에 집중할 수 있다.
//		불변의 규칙을 지키면 객체지향적인 간결한 코드가 나올 수 있다.
//		
//		final의 효과
//		서비스 안정성이 올라간다.
//		버그 발생 가능성이 줄어든다.
//		버그를 찾는 시점이 빨라진다.
//		코드 품질이 향상되고 변화에 빠르게 대응할 수 있다.
//		
//		불변 객체
//		한 번 생성되면 상태를 수정할 수 없는 객체를 의미한다. => 생성이 된 불변 객체는 신뢰할 수 있다.
//		
//		불변 객체 장점
//		멀티 쓰레드에서 발생하는 동기화 문제를 방지할 수 있다. (예. add메서드가 있는 Money 클래스가 두 개가 있을 때, 첫 번째에 10000을 넣고 두 번째에 500을 넣으면 결과적으로  두 개의 클래스는 500을 반환하는 문제)
//		방지 예시. Money 클래스에 값을 넣을 때마다 public 생성자에 매번 새로운 객체를 생성하기 때문에 여러 쓰레드가 동시에 사용되어도 훼손이 없고 안전하다.
//		
//		불변 객체를 사용해야 하는 이유
//		간단하고 신뢰성 있는 코드로 만들 수 있다.
//		가변 객체보다 설계하고 구현하고 사용하기 쉽고 오류가 발생할 여지가 적고 훨씬 안전하다.
		
		
		
	}

}
