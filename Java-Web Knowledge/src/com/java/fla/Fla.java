package com.java.fla;

public class Fla {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// Framework vs Library vs Api
		
		/*
		1. Api
			(A)어플리케이션 - 운영체제를 제외한 나머지 소프트웨어. 대부분은 어플리케이션이라고 생각하자
			(P)프로그래밍 - 프로그래밍을 통해 인터페이스에 접근.
			(I)인터페이스 - 시스템을 구성하는 두 개의 구성. 요소가 상호 작요을 하기 위해서는 경계가 필요
						인터페이스는 경계에서 각 구성 요소가 상호 접속하기 위한 하드웨어와 소프트웨어, 조건 등을 포괄적으로 가리킨다.
						예를 들어 멀티탭. 전기 요소와 이를 이용해야 하는 냉장고를 연결해주는 매개체 혹은 리모컨. 사람과 TV 사이를 연결
			즉, Api는 소프트웨어를 조종하는 리모컨! (네이버Api, 깃허브Api)
			(클라이언트 객체가 서비스 객체에 퍼블릭 인터페이스를 통해 구현에 접근하는 자바 함수도 Api일 수 있다)
		
		2. Framework (프레임워크)
		 	클래스나 인터페이스를 정의. 인스턴스의 상호 작용을 통해 시스템 전체 혹은 일부를 구현해 놓은 재사용 가능한 설계
		 	어플리케이션 개발자 요구사항에 맞게 커스터마이징 할 수 있는 어플리케이션의 골격
		 	코드를 재사용 못함으로써 설계 아이디어를 재사용. 코드 재사용과 설계 재사용을 합 -> 범용적으로 재사용 가능
		 	코드를 통해 재생할 수 있었던 이유는 특수한 로직에 종속되지 않기 때문일 수 있고 어플리케이션을 제어할 수 있기 때문에
		 	즉 설계를 재사용할 수 있기 위해서는 프레임워크가 제어를 해준다
		
		3. Library (라이브러리)
			기능 모음. 소프트웨어를 개발할 때 컴퓨터 프로그래밍의 비휘발성 모임
		
		* 디자인 패턴
			소프트웨어 설계에서 반복적으로 발생하는 문제에 반복적으로 적용할 수 있는 해결 방법
			목적은 설계를 재사용한다 이는 코드 재사용이 불가능하다
			* 패턴 - 반복적으로 진행하는 업무의 문제를 어떠한 방식으로 활용하면 문제 해결에 도움이 되겠다
		
		프레임워크와 라이브러리의 등장 배경
			설계 재사용을 강조하는 디자인 패턴으로는 코드를 재사용할 수 없다
			코드 재사용의 끝판왕 컴포넌트 조립 방식이 실패했다 -> 개발자는 코드도 재사용하고 싶다
			(컴포넌트 조립 방식 -> 새로운 것을 만들 때 코드를 새로 작성하기보다 기존의 코드를 사용하겠다)
			결국 설계 재사용은 아쉽고 코드 재사용하는 것은 불가능하다 보니 라이브러리는 특정 기능들에도 코드를 재사용 해야겠다. 즉, 기능을 모으겠다
			
			
		프레임워크와 라이브러리
			둘 다 재사용과 관련
			프레임워크는 설계 코드 재생해 목적이 있지만 주 목적은 설계 재사용할 수 있다
			라이브러리는 어떤 특정한 도메인에 종속 되더라도 해당 코드를 재사용하는 것이 목적
			
			* 제허흐름의 경우
			라이브러리는 전통적인 하향식 방식(큰 함수에서 작은 함수를 불러오고 다시 작은 함수에서 더 작은 함수를 불러옴 -> 실행). 즉, 추상화된 모듈이 더 구체적인 로직을 호출
			프레임워크는 제어의 주체가 역전(내가 부르는 것이 아닌 프레임워크가 부름)되어 나의 코드를 호출
			
			* 쓰임세
			프레임워크는 설계를 재사용할 목적으로 능동적으로 활용하고 커스터마이징할 수 있다
			라이브러리는 어려운 알고리즘을 구현할 때. 직접 프로그래밍 하면 오래걸릴 때.
		*/
		 
		
		
	}

}
