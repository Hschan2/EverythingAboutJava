package com.java.osi;

public class OSI7_Class {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//		1. Physical Layer
//			두 대의 컴퓨터를 연결하려면? 모든 파일과 프로그램은 0과 1의 나열. 0과 1만 주고 받으면 된다.
//			0과 1을 주고 받을 수 있으면 모든 데이터를 주고 받을 수 있으니 두 대의 컴퓨터는 모든 데이터를 주고 받을 수 있다
//				-> But, 전자기파가 각각 다르면 모든 데이터를 받을 수 없다 => 두 대의 컴퓨터는 같은 전자기파를 주고 받을 수 있으면 된다. (디지털 신호를 아날로그 신호로 바꿔야 한다)
//			
//			=> Physical Layer = 0과 1의 나열을 아날로그 신호로 바꾸어 전선으로 전송(encoding) -> 전송 받은 아날로스 신호를 0과 1의 나열로 해석(decoding). 물리적 연결의 두 대의 컴퓨터가 0과 1의 나열로 주고 받을 수 있는 모듈
//				(PHY칩 등 하드웨어적으로 구현)
//		
//		* 여러 대의 컴퓨터 통신
//			전선 하나 혹은 상자(라우터) 하나로 통신하는 방법을 찾자. 여러 대 중에서 특정 한 대에 데이터를 보내기 위해서넌? 스위치!
//			각 스위치(라우터)끼리 연결하면 서로 다른 라우터를 갖고 있는 컴퓨터끼리 통신 가능
//			
//		2. Data-Link Layer
//			수신자가 잘못된 데이터를 받는 것을 방지하기 위해 송신자는 데이터 앞에 특정 비트열을 붙임 (전송 받은 데이터를 특정 비트열로 나누어 수신)
//			
//			=> Data-Link Layer = 같은 네트워크에 있는 여러 대의 컴퓨터들이 데이터를 주고받기 뒤해 필요한 모듈
//								Framing은  Data-Link Layer에 속하는 작업 중 하나
//				(LAN 카드 등 하드웨어적으로 구현)
//								
//		3. Network Layer
//			각 컴퓨터는 고유의 주소 = IP를 갖는다. 전송하고자 하는 컴퓨터는 수신하는 컴퓨터의 IP주소를 알아야 한다.
//			IP + 데이터로 보내고 싶은 컴퓨터에 전송한다 (패킷을 전송한다)
//			IP + 데이터를 패킷 혹은 *구조체 혹은 *객체
//			
//			=> Network Layer = 수많은 네트워크로 연결로 이뤄진 inter-network 속에서 어딘가에 있는 목적지의 컴퓨터로 데이터를 전송하기 위해서 IP 주소를 이용해 길을 찾고 (Rouing) 자신 다음의 라우터에게 데이터를 넘겨주는 것 (Forwarding)
//				(운영체제의 커널에 소프트웨어적으로 구현)
//		
//		4. Transport Layer
//			어떠한 데이터를 어떠한 프로세스에게 전송해야 할까? -> 데이터를 받는 프로세스는 포트 번호를 가져야 한다 -> 송신자는 데이터를 보낼 때 데이터에 수신자의 포트 번호를 붙여서 보낸다
//			
//			=> Transport Layer = 포트 번호를 사용해 도착지 컴퓨터의 최종 도착지인 프로세스에 까지 데이터가 도달하게 만드는 모듈
//				(운영체제의 커널에 소프트웨어적으로 구현)
//		
//		5. Application Layer
//			현대의 인터넷은 TCP/IP를 사용 ( => Session Layer, Presentation Layer 통합)
//			TCP/IP 소켓 프로그래밍 - Transport Layer에서 제공하는 API를 활용해 통신 가능한 프로그램을 개발하는 것을 말함 (네트워크 프로그래밍이라고도 함) -> 채팅 프로그램 등, 소켓 프로그래밍으로 클라이언트와 서버 프로그램을 따로 개발하고 동작 가능
//			TCP/IP 소켓 프로그래밍을 통해 자신만의 Application Layer 인코더와 디코더를 만들 수 있음 = 자신만의 Application Layer 프로토콜을 만들어서 사용할 수 있음
//			대표적인 Application Layer 프로토콜은 HTTP
//			서버 측 HTTP 인코더를 통과하면 스테이터스(Status) 코드(예시) + 데이터가 전송 => 클라이언트 측 HTTP 디코더에서 해석해 데이터 수신
//			
//		* MVC 패턴은 소프르웨어 아키텍처 중 하나. 
//		   소프트웨어 아키텍처 중에 Layered 아키텍처가 있다.
//		  Layered 아키텍처를 따르는 대표적인 예가 네트워크 시스템.
//		  
//		  => 즉, 네트워크 시스템은 하나의 커다란 소프트웨어라고 할 수 있음
//		
//		** OSI 7 Layer 모델은 거대한 네트워크 소프트웨어의 구조
	}

}
